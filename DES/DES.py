import sys

# Input message as a 64bit binary number string
# Input key as a 64bit binary number string
def DES(message, key):
	IP = [58, 50, 42, 34, 26, 18, 10, 2, \
		  60, 52, 44, 36, 28, 20, 12, 4, \
		  62, 54, 46, 38, 30, 22, 14, 6, \
		  64, 56, 48, 40, 32, 24, 16, 8, \
		  57, 49, 41, 33, 25, 17,  9, 1, \
		  59, 51, 43, 35, 27, 19, 11, 3, \
		  61, 53, 45, 37, 29, 21, 13, 5, \
		  63, 55, 47, 39, 31, 23, 15, 7 ]
	
	IPR = [40, 8, 48, 16, 56, 24, 64, 32, \
		   39, 7, 47, 15, 55, 23, 63, 31, \
		   38, 6, 46, 14, 54, 22, 62, 30, \
		   37, 5, 45, 13, 53, 21, 61, 29, \
		   36, 4, 44, 12, 52, 20, 60, 28, \
		   35, 3, 43, 11, 51, 19, 59, 27, \
		   34, 2, 42, 10, 50, 18, 58, 26, \
		   33, 1, 41,  9, 49, 17, 57, 25 ]

	E = [32,  1,  2,  3,  4,  5, \
		  4,  5,  6,  7,  8,  9, \
		  8,  9, 10, 11, 12, 13, \
		 12, 13, 14, 15, 16, 17, \
		 16, 17, 18, 19, 20, 21, \
		 20, 21, 22, 23, 24, 25, \
		 24, 25, 26, 27, 28, 29, \
		 28, 29, 30, 31, 32, 1 ]
	
	P = [16,  7, 20, 21, \
		 29, 12, 28, 17, \
		  1, 15, 23, 26, \
		  5, 18, 31, 10, \
		  2,  8, 24, 14, \
		 32, 27,  3,  9, \
		 19, 13, 30,  6, \
		 22, 11,  4, 25 ]
	
	init = []
	for i in IP:
		init.append(int(message[i-1]))
#	print(init)

	# KeyGen
	partialkey = []
	PC1 = [57, 49, 41, 33, 25, 17,  9, \
		    1, 58, 50, 42, 34, 26, 18, \
		   10,  2, 59, 51, 43, 35, 27, \
		   19, 11,  3, 60, 52, 44, 36, \
		   63, 55, 47, 39, 31, 23, 15, \
		    7, 62, 54, 46, 38, 30, 22, \
		   14,  6, 61, 53, 45, 37, 29, \
		   21, 13,  5, 28, 20, 12,  4 ]

	PC2 = [14, 17, 11, 24,  1,  5, \
		    3, 28, 15,  6, 21, 10, \
		   23, 19, 12,  4, 26,  8, \
		   16,  7, 27, 20, 13,  2, \
		   41, 52, 31, 37, 47, 55, \
		   30, 40, 51, 45, 33, 48, \
		   44, 49, 39, 56, 34, 53, \
		   46, 42, 50, 36, 29, 32 ]
	
	key0 = []
	for i in PC1:
		key0.append(int(key[i-1]))
	keyround = 0
	movebit = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
	
	while keyround < 16:
		C = key0[:28]
		D = key0[28:]
		Cn = C[movebit[keyround]:] + C[:movebit[keyround]]
		Dn = D[movebit[keyround]:] + D[:movebit[keyround]]
		key0 = Cn + Dn
		partial = []
		for i in PC2:
			partial.append(key0[i-1])
		partialkey.append(partial)
		keyround += 1
	

	# S-box
	def SBox(bits, index):	# bits of 6-len list, index of 0~7
		box = [ [ [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], \
				  [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], \
				  [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], \
				  [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13] ], \
				[ [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], \
				  [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], \
				  [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], \
				  [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9] ], \
				[ [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], \
				  [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], \
				  [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], \
				  [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12] ], \
				[ [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], \
				  [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], \
				  [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], \
				  [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] ], \
				[ [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], \
				  [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], \
				  [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], \
				  [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3] ], \
				[ [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], \
				  [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], \
				  [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], \
				  [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13] ], \
				[ [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], \
				  [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], \
				  [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], \
				  [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12] ], \
				[ [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], \
				  [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], \
				  [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], \
				  [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11] ] ]
		return box[index][2*bits[0]+bits[5]][8*bits[1]+4*bits[2]+2*bits[3]+bits[4]]

	
	round = 0
	while round < 16:
		L = init[:32]
		R = init[32:]
		Rn = []
		for i in E:
			Rn.append(R[i-1])
		F = []
		for i in range(48):
			if Rn[i]==1 and partialkey[round][i]==1:
				F.append(0)
			else:
				F.append(Rn[i]+partialkey[round][i])
		S = ''
		binlist = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', \
				   '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111']
		for i in range(8):
			smallkey = SBox(F[6*i:6*(i+1)], i)
			S = S + binlist[smallkey]
		Pn = []
		for i in P:
			Pn.append(int(S[i-1]))		
		
		Rnn = []
		for i in range(32):
			if L[i]==1 and Pn[i]==1:
				Rnn.append(0)
			else:
				Rnn.append(L[i]+int(Pn[i]))

		init = R + Rnn
		round += 1

		st = ''.join(str(x) for x in init)
		for i in range(7):
			st = st[:9*i+8] + ' ' + st[9*i+8:]
		print(str(round) + "\t: " + st)
	
	result = []
	init = init[32:] + init[:32]
	for i in IPR:
		result.append(init[i-1])
	return result



if __name__ == "__main__":
	message = '0123 4567 89ab cdef'	# Hexadecimal
	print("Message\t: " + message)
	message = ''.join(message.split())
	messagetrans = bin(int(message, 16))[2:]
	while len(messagetrans) < 64:
		messagetrans = '0' + messagetrans

	key = '1334 5779 9BBC DFF1'	# Hexadecimal
	key = ''.join(key.split())
	keytrans = bin(int(key, 16))[2:]
	while len(keytrans) < 64:
		keytrans = '0' + keytrans
	
	msg = messagetrans
	kyy = keytrans
	for i in range(7):
		msg = msg[:9*i+8] + ' ' + msg[9*i+8:]
	print("Message\t: " + msg)
	for i in range(7):
		kyy = kyy[:9*i+8] + ' ' + kyy[9*i+8:]
	print("Key\t: " + kyy)
	print()

	result = DES(messagetrans, keytrans)
	res = ''.join(str(x) for x in result)
	res = hex(int(res, 2))[2:]
	for i in range(7):
		res = res[:5*i+4] + ' ' + res[5*i+4:]
	print("\nResult\t: " + res)
	